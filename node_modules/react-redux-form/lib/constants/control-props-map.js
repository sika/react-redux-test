'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createControlPropsMap = undefined;

var _isMulti = require('../utils/is-multi');

var _isMulti2 = _interopRequireDefault(_isMulti);

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _actions = require('../actions');

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultStrategies = {
  array: [],
  object: {},
  length: function length(val) {
    return val.length;
  },
  push: _icepick2.default.push
};

function createControlPropsMap() {
  var s = arguments.length <= 0 || arguments[0] === undefined ? defaultStrategies : arguments[0];

  function getTextValue(value) {
    if (typeof value === 'string' || typeof value === 'number') {
      return '' + value;
    }

    return '';
  }

  function isChecked(props) {
    if ((0, _isMulti2.default)(props.model)) {
      if (!props.modelValue) return false;

      return props.modelValue.some(function (item) {
        return item === props.value;
      });
    }

    return !!props.modelValue;
  }

  var textPropsMap = {
    value: function value(props) {
      return !props.defaultValue && !props.hasOwnProperty('value') ? getTextValue(props.viewValue) : props.value;
    },
    name: function name(props) {
      return props.name || props.model;
    }
  };

  return {
    default: textPropsMap,
    checkbox: {
      name: function name(props) {
        return props.name || props.model;
      },
      checked: function checked(props) {
        return props.defaultChecked ? props.checked : isChecked(props);
      },
      changeAction: function changeAction(props) {
        return function (model) {
          var modelValue = props.modelValue;
          var value = props.value;


          if ((0, _isMulti2.default)(model)) {
            var valueWithItem = modelValue || s.array;
            var valueWithoutItem = (valueWithItem || s.array).filter(function (item) {
              return item !== value;
            });
            var multiValue = s.length(valueWithoutItem) === s.length(valueWithItem) ? s.push(valueWithItem, value) : valueWithoutItem;

            return _actions2.default.change(model, multiValue);
          }

          return _actions2.default.change(model, !modelValue);
        };
      }
    },
    radio: {
      name: function name(props) {
        return props.name || props.model;
      },
      checked: function checked(props) {
        return props.defaultChecked ? props.checked : props.modelValue === props.value;
      },
      value: function value(props) {
        return props.value;
      }
    },
    select: {
      name: function name(props) {
        return props.name || props.model;
      },
      value: function value(props) {
        return props.modelValue;
      }
    },
    text: textPropsMap,
    textarea: textPropsMap,
    file: {
      name: function name(props) {
        return props.name || props.model;
      }
    },
    reset: {
      onClick: function onClick(props) {
        return function (event) {
          event.preventDefault();
          props.dispatch(_actions2.default.reset(props.model));
        };
      }
    }
  };
}

var controlPropsMap = createControlPropsMap();

exports.default = controlPropsMap;
exports.createControlPropsMap = createControlPropsMap;
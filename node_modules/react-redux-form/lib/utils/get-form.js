'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFormStateKey = getFormStateKey;

var _get = require('../utils/get');

var _get2 = _interopRequireDefault(_get);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _pathStartsWith = require('../utils/path-starts-with');

var _pathStartsWith2 = _interopRequireDefault(_pathStartsWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function joinPaths(firstPath, secondPath) {
  if (!firstPath || !firstPath.length) return secondPath;

  return firstPath + '.' + secondPath;
}

function getFormStateKey(state, model) {
  var currentPath = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

  var deepCandidateKeys = [];
  var result = null;

  Object.keys(state).some(function (key) {
    var subState = state[key];

    if (subState && subState.$form) {
      if (subState.$form.model === '') {
        return Object.keys(subState).some(function (formKey) {
          var formState = subState[formKey];

          if (formKey === '$form') return false;

          if (!formState.$form) return false;

          if ((0, _pathStartsWith2.default)(model, joinPaths(currentPath, formState.$form.model))) {
            result = currentPath ? [currentPath, key, formKey].join('.') : [key, formKey].join('.');

            return true;
          }

          return false;
        });
      }

      if ((0, _pathStartsWith2.default)(model, subState.$form.model)) {
        result = currentPath ? [currentPath, key].join('.') : key;

        return true;
      }

      return false;
    }

    if ((0, _isPlainObject2.default)(subState)) {
      deepCandidateKeys.push(key);
    }

    return false;
  });

  if (result) return result;

  deepCandidateKeys.some(function (key) {
    result = getFormStateKey(state[key], model, currentPath ? [currentPath, key].join('.') : key);

    return !!result;
  });

  if (result) return result;

  return null;
}

var formStateKeyCache = {};

var getFormStateKeyCached = function () {
  return function (state, modelString) {
    if (formStateKeyCache[modelString]) return formStateKeyCache[modelString];

    var result = getFormStateKey(state, modelString);

    formStateKeyCache[modelString] = result; // eslint-disable-line no-return-assign

    return result;
  };
}();

function getForm(state, modelString) {
  var formStateKey = getFormStateKeyCached(state, modelString);

  if (!formStateKey) {
    return null;
  }

  return (0, _get2.default)(state, formStateKey);
}

getForm.clearCache = function () {
  return formStateKeyCache = {};
}; // eslint-disable-line no-return-assign

exports.default = getForm;
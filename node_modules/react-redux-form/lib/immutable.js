'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.track = exports.getField = exports.form = exports.batched = exports.modeled = exports.createFieldClass = exports.Errors = exports.Form = exports.Control = exports.Field = exports.controls = exports.actionTypes = exports.actions = exports.initialFieldState = exports.combineForms = exports.modelReducer = exports.formReducer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _modelReducer = require('./reducers/model-reducer');

var _formReducer = require('./reducers/form-reducer');

var _formReducer2 = _interopRequireDefault(_formReducer);

var _modeledEnhancer = require('./enhancers/modeled-enhancer');

var _modelActions = require('./actions/model-actions');

var _controlPropsMap = require('./constants/control-props-map');

var _formsReducer = require('./reducers/forms-reducer');

var _fieldActions = require('./actions/field-actions');

var _fieldActions2 = _interopRequireDefault(_fieldActions);

var _getValue = require('./utils/get-value');

var _getValue2 = _interopRequireDefault(_getValue);

var _toPath = require('./utils/to-path');

var _toPath2 = _interopRequireDefault(_toPath);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _index = require('./index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function immutableSet(state, path, value) {
  try {
    return state.setIn(path, value);
  } catch (error) {
    throw new Error('Unable to set path \'' + path.join('.') + '\' in state. Please make sure that state is an Immutable instance.');
  }
}

function immutableGetFromState(state, modelString) {
  var path = (0, _toPath2.default)(modelString);

  return path.reduce(function (subState, subPath) {
    if (!subState) return subState;

    // Current subState is immutable
    if ('get' in subState) {
      return subState.get(subPath);
    }

    // Current subState is a plain object/array
    return subState[subPath];
  }, state);
}

var immutableStrategy = {
  get: immutableGetFromState,
  set: immutableSet,
  getValue: _getValue2.default,
  splice: function splice(list) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return list.splice.apply(list, args);
  },
  merge: function merge(map) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    return map.merge.apply(map, args);
  },
  remove: function remove(map) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    return map.remove.apply(map, args);
  },
  push: function push(list) {
    for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }

    return list.push.apply(list, args);
  },
  length: function length(list) {
    return list.size;
  },
  object: new _immutable2.default.Map(),
  array: new _immutable2.default.List()
};

function transformAction(action) {
  if (action.value && action.value.toJS) {
    return _extends({}, action, {
      value: action.value.toJS()
    });
  }

  if (action.actions) {
    return _extends({}, action, {
      actions: action.actions.map(transformAction)
    });
  }

  return action;
}

function immutableFormReducer(model) {
  var initialState = arguments.length <= 1 || arguments[1] === undefined ? new _immutable2.default.Map() : arguments[1];
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _initialState = initialState && initialState.toJS ? initialState.toJS() : initialState;

  return (0, _formReducer2.default)(model, _initialState, _extends({}, options, {
    transformAction: transformAction
  }));
}

var immutableModelReducer = (0, _modelReducer.createModeler)(immutableStrategy);
var immutableModelReducerEnhancer = (0, _modeledEnhancer.createModelReducerEnhancer)(immutableModelReducer);
var immutableModelActions = (0, _modelActions.createModelActions)(immutableStrategy);
var immutableControlPropsMap = (0, _controlPropsMap.createControlPropsMap)(immutableStrategy);
var ImmutableField = (0, _index.createFieldClass)(immutableControlPropsMap, {
  getter: immutableGetFromState,
  changeAction: immutableModelActions.change
});
var immutableCombineForms = (0, _formsReducer.createFormCombiner)({
  modelReducer: immutableModelReducer,
  formReducer: immutableFormReducer,
  modeled: immutableModelReducerEnhancer,
  toJS: function toJS(val) {
    return val && val.toJS ? val.toJS() : val;
  }
});

var immutableActions = _extends({}, immutableModelActions, _fieldActions2.default);

exports.formReducer = immutableFormReducer;
exports.modelReducer = immutableModelReducer;
exports.combineForms = immutableCombineForms;
exports.initialFieldState = _index.initialFieldState;
exports.actions = immutableActions;
exports.actionTypes = _index.actionTypes;
exports.controls = immutableControlPropsMap;
exports.Field = ImmutableField;
exports.Control = _index.Control;
exports.Form = _index.Form;
exports.Errors = _index.Errors;
exports.createFieldClass = _index.createFieldClass;
exports.modeled = immutableModelReducerEnhancer;
exports.batched = _index.batched;
exports.form = _index.form;
exports.getField = _index.getField;
exports.track = _index.track;